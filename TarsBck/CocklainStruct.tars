
module CocklainStruct
{
	// 通用的占位数据结构（适应无参请求&返回）
    struct TPlaceholder
    {
        0 require   byte		placeholder = 0;			// 占位，无意义
    };

	struct TNotifyGameConfig
	{
		0 require   byte		placeholder = 0;			// 先放这里吧
	};
	
	// 手牌列表
	struct TCardInfo
	{
		0 require vector<byte>	cards;	// 某位玩家的牌
	};

	// 通知游戏开始
	// 发四张牌
	// 准备抢庄
	struct TRespGameStart
	{
		0 require byte					roundCurr;			// 当前局数
		1 require vector<TCardInfo>		listCardInfo;		// 座位上所有玩家的牌
	};

	// 玩家请求抢庄
	struct TReqSnatchbanker 				
	{
		0 require unsigned byte		multiple;				// 倍数
	};

	// 广播玩家抢庄
	struct TNotifySnatchbanker 				
	{
		1 require unsigned short	chairIdx;			// 座位序号
		2 require unsigned byte		multiple;			// 倍数
	};

	// 抢庄结果
	struct TNotifySnatchbankerFinish 
	{
		0 require unsigned short		dealer;  			// 庄家座位号
	};

	// 玩家推注设置
	struct TUserBolus 		
	{
		0 require unsigned short		chairIdx;		// 座椅号
		1 require unsigned byte			multiple;		// 可推注倍数
	};

	// 通知选分开始
	struct TRespChooseScoreBegin
	{
		0 require unsigned byte			baseScore1;		// 底分1
		1 require unsigned byte			baseScore2;		// 底分2
		2 require vector<TUserBolus> 	listTUserBolus;	// 各玩家可推注倍数
	};

	// 玩家选分
	struct TReqChooseScore				
	{
		0 require unsigned byte		chooseScore;			// 选分分数
	};

	// 广播玩家选分
	struct TNotifyChooseScore 				
	{
		1 require unsigned short	chairIdx;			// 座位序号
		2 require unsigned byte		chooseScore;	    // 分数
	};

	// 选分结果
	struct TNotifyChooseScoreFinish
	{
		0 require vector<TNotifyChooseScore>	listUserScore;
	};

	// 买卖分开始
	struct TRespSellBuyBegin
	{
		0 require vector<unsigned int>	vecSellBuyScores;
	};


	// 卖分
	struct TReqSellScore
	{
		0 require unsigned byte			score;  		// 分数
	};

	// 广播玩家卖分
	struct TNotifySellScore
	{
		1 require unsigned short	chairIdx;			// 座位序号
		2 require unsigned byte			score;  		// 分数
	};

	// 买分
	struct TReqBuyScore
	{
		0 require unsigned short		chairIdx;  		// 买卖对象（卖家）
	};

	// 广播玩家买分	
	struct TNotifyBuyScore
	{
		0 require unsigned short		chairIdx;  		// 买家
		1 require unsigned short		chairIdxFrom;	// 卖家
	};

	// 玩家回合结果
	struct TRoundResult
	{
		0 require TCardInfo				cardInfo;			// 玩家的牌
		1 optional E_CARD_PATTERN		cardPattern;		// 牌型
		2 require  int					winScore;			// 本局正负分
		3 require  int					remainScore;		// 剩余分数
	};

	// 回合结束
	struct TNotifyGameFinish
	{
		0 require vector<TRoundResult>		listRoundResult;		// 座位上所有玩家的牌
	};

	// 玩家总结果
	struct TGameResult
	{
		0 require unsigned int			userID;				// 玩家ID
		1 require int					remainScore;		// 分数
	};

	// 游戏总结算
	struct TNotifyGameOver
	{
		0 require vector<TGameResult> listGameResult;
	};


	// 玩家断线重连获取的游戏数据
	struct TRespGameData
	{
		1 require TNotifyGameConfig		gameConfig;		    // 游戏配置
		2 require unsigned byte			gameStatus;			// 游戏当前状态

		5 optional unsigned short		dealer;  			// 庄家座位号
		6 optional vector<TCardInfo>	listCardInfo;		// 玩家的牌（本回合，全玩家）
		7 require	 unsigned byte		multiple = -1;		// 抢庄倍数（本人）-1：未抢庄状态


		10 optional TRespChooseScoreBegin	chooseScoreConf;		// 叫分设置
		11 optional vector<TNotifyChooseScore>	listUserScore;		// 选分结果


		// 8 optional TScoreSellBuyConf	scoreSellBuyConf;	// 买卖分设置
		// 9 optional TScoreSellBuyRecord	scoreSellBuyRecord;	// 买卖分记录

		// 10 require TRoundResult			roundResult;		// 结算数据
	};

};
