module GameNodeMsg
{
    const short nVersion = 1;   // 协议号（每次正式发布数值+1）

    enum EGameMsgType
    {
        ENOTIFYDATA = 0 ,   // vecNotifyData
        ERESPONEDATA    ,   // vecRespOneData
        ERESPALLDATA    ,   // vecRespAllData
        EMIXTUREDATA    ,   // vecNotifyData & vecRespOneData
    };

    struct TReqMessage
    {
        0 require short nVer = nVersion;    // 版本
        1 require short nGameCmd = 0;       // 指令（玩家提供/或RoomServer提供）
        2 require string sTableNo;          // 桌子号  (必须知道桌子号，RoomServer提供）
        3 require short nChairIdx = -1;     // 座位序号 默认为RoomServer的消息（RoomServer提供）
        4 optional vector<byte> vecData;    // 消息数据（玩家消息直接转发）
    };

    struct TRespMessage
    {
        1 require EGameMsgType eMsgType;    // 消息类型
        2 optional TGameData stGameData;    // 消息数据
    };

    /**
    * 游戏返回数据
    * =======================
    * 根据EGameMsgType取下列数据，详细见枚举说明
    */
    struct TGameData
    {
        0 optional vector<byte> vecRespOneData;     // 一份，需推送给请求座位序号
        1 optional vector<byte> vecRespAllData;     // N份，需分别发给座位上的玩家
        2 optional vector<byte> vecNotifyData;      // 一份，需广播给座位上的玩家
    };

    interface IGameMessage
    {
        /**
        * 通往游戏的协议（单向）
        * @return 0：正常，>0：请求其他指令（该值，消息数据为空）, <0：错误码
        */
        short doGameMessage(TReqMessage tReqMessage, out TRespMessage tRespMessage);
    };
};



/**
* 说明
* =========================
* 设计架构
* - GameServer为单向驱动。
* - GameServer采用Map管理N个游戏桌。
* 
* 单向驱动
* - RoomServer组装数据，请求 doGameMessage
*   - TReqMessage 必须指定桌子号，如果是玩家消息，需指定座位序号（默认为-1，是RoomServer的消息）
*   - doGameMessage 返回值
*       - =0： 正常解析TRespMessage
*       - >0： 正常解析TRespMessage，同时将该值作为指令，再次请求 doGameMessage（此时座位号为-1）
*       - <0： 请求错误（忽略&日志......，日志可由GameServer记录）
*
*/