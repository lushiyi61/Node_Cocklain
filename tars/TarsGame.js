// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

"use strict";

var assert     = require('assert');
var TarsStream = require('@tars/stream');
var TarsError  = require('@tars/rpc').error;

var TarsGame = TarsGame || {};
module.exports.TarsGame = TarsGame;


TarsGame.E_GAME_MSGID = {
    GAMECREATE : 10,
    GAMERECONNECT : 11,
    GAMESTART : 12,
    GAMETIMEOUT : 13,
    GAMEFINISH : 14,
    GAMEDISMISS : 15,
    GAMERESULT : 16,
    GAMEACTION1 : 51,
    GAMEACTION2 : 52,
    GAMEACTION3 : 53,
    GAMEACTION4 : 54,
    GAMEACTION5 : 55,
    GAMEACTION6 : 56,
    GAMEACTION7 : 57,
    GAMEACTION8 : 58,
    GAMEACTION9 : 59
};
TarsGame.E_GAME_MSGID._write = function(os, tag, val) { return os.writeInt32(tag, val); }
TarsGame.E_GAME_MSGID._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

TarsGame.EGameMsgType = {
    E_NOTIFY_DATA : 0,
    E_RESPONE_DATA : 1,
    E_RESPALL_DATA : 2,
    E_MIXTURE_DATA : 3
};
TarsGame.EGameMsgType._write = function(os, tag, val) { return os.writeInt32(tag, val); }
TarsGame.EGameMsgType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

TarsGame.TGameCreate = function() {
    this.rules = "";
    this._classname = "TarsGame.TGameCreate";
};
TarsGame.TGameCreate._classname = "TarsGame.TGameCreate";

TarsGame.TGameCreate._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TGameCreate._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TGameCreate._readFrom = function (is) {
    var tmp = new TarsGame.TGameCreate();
    tmp.rules = is.readString(0, true, "");
    return tmp;
};
TarsGame.TGameCreate.prototype._writeTo = function (os) {
    os.writeString(0, this.rules);
};
TarsGame.TGameCreate.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TGameCreate.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TGameCreate.prototype.toObject = function() { 
    var tmp = {};

    tmp.rules = this.rules;
    
    return tmp;
}
TarsGame.TGameCreate.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("rules") || (this.rules = json.rules);
}
TarsGame.TGameCreate.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TGameCreate.new = function () {
    return new TarsGame.TGameCreate();
}
TarsGame.TGameCreate.create = function (is) {
    return TarsGame.TGameCreate._readFrom(is);
}

TarsGame.TGamgStart = function() {
    this.vecUserID = new TarsStream.List(TarsStream.Int64);
    this._classname = "TarsGame.TGamgStart";
};
TarsGame.TGamgStart._classname = "TarsGame.TGamgStart";

TarsGame.TGamgStart._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TGamgStart._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TGamgStart._readFrom = function (is) {
    var tmp = new TarsGame.TGamgStart();
    tmp.vecUserID = is.readList(0, true, TarsStream.List(TarsStream.Int64));
    return tmp;
};
TarsGame.TGamgStart.prototype._writeTo = function (os) {
    os.writeList(0, this.vecUserID);
};
TarsGame.TGamgStart.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TGamgStart.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TGamgStart.prototype.toObject = function() { 
    var tmp = {};

    tmp.vecUserID = this.vecUserID.toObject();
    
    return tmp;
}
TarsGame.TGamgStart.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("vecUserID") || (this.vecUserID.readFromObject(json.vecUserID));
}
TarsGame.TGamgStart.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TGamgStart.new = function () {
    return new TarsGame.TGamgStart();
}
TarsGame.TGamgStart.create = function (is) {
    return TarsGame.TGamgStart._readFrom(is);
}

TarsGame.TReqMessage = function() {
    this.nVer = 1;
    this.nMsgID = 0;
    this.sTableNo = "";
    this.nChairIdx = -1;
    this.vecData = new TarsStream.BinBuffer();
    this._classname = "TarsGame.TReqMessage";
};
TarsGame.TReqMessage._classname = "TarsGame.TReqMessage";

TarsGame.TReqMessage._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TReqMessage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TReqMessage._readFrom = function (is) {
    var tmp = new TarsGame.TReqMessage();
    tmp.nVer = is.readInt16(0, true, 1);
    tmp.nMsgID = is.readInt16(1, true, 0);
    tmp.sTableNo = is.readString(2, true, "");
    tmp.nChairIdx = is.readInt16(3, true, -1);
    tmp.vecData = is.readBytes(4, false, TarsStream.BinBuffer);
    return tmp;
};
TarsGame.TReqMessage.prototype._writeTo = function (os) {
    os.writeInt16(0, this.nVer);
    os.writeInt16(1, this.nMsgID);
    os.writeString(2, this.sTableNo);
    os.writeInt16(3, this.nChairIdx);
    os.writeBytes(4, this.vecData);
};
TarsGame.TReqMessage.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TReqMessage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TReqMessage.prototype.toObject = function() { 
    var tmp = {};

    tmp.nVer = this.nVer;
    tmp.nMsgID = this.nMsgID;
    tmp.sTableNo = this.sTableNo;
    tmp.nChairIdx = this.nChairIdx;
    tmp.vecData = this.vecData.toObject();
    
    return tmp;
}
TarsGame.TReqMessage.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("nVer") || (this.nVer = json.nVer);
    !json.hasOwnProperty("nMsgID") || (this.nMsgID = json.nMsgID);
    !json.hasOwnProperty("sTableNo") || (this.sTableNo = json.sTableNo);
    !json.hasOwnProperty("nChairIdx") || (this.nChairIdx = json.nChairIdx);
    !json.hasOwnProperty("vecData") || (this.vecData.readFromObject(json.vecData));
}
TarsGame.TReqMessage.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TReqMessage.new = function () {
    return new TarsGame.TReqMessage();
}
TarsGame.TReqMessage.create = function (is) {
    return TarsGame.TReqMessage._readFrom(is);
}

TarsGame.TData = function() {
    this.nMsgID = 0;
    this.vecData = new TarsStream.BinBuffer();
    this._classname = "TarsGame.TData";
};
TarsGame.TData._classname = "TarsGame.TData";

TarsGame.TData._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TData._readFrom = function (is) {
    var tmp = new TarsGame.TData();
    tmp.nMsgID = is.readInt16(0, true, 0);
    tmp.vecData = is.readBytes(1, true, TarsStream.BinBuffer);
    return tmp;
};
TarsGame.TData.prototype._writeTo = function (os) {
    os.writeInt16(0, this.nMsgID);
    os.writeBytes(1, this.vecData);
};
TarsGame.TData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TData.prototype.toObject = function() { 
    var tmp = {};

    tmp.nMsgID = this.nMsgID;
    tmp.vecData = this.vecData.toObject();
    
    return tmp;
}
TarsGame.TData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("nMsgID") || (this.nMsgID = json.nMsgID);
    !json.hasOwnProperty("vecData") || (this.vecData.readFromObject(json.vecData));
}
TarsGame.TData.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TData.new = function () {
    return new TarsGame.TData();
}
TarsGame.TData.create = function (is) {
    return TarsGame.TData._readFrom(is);
}

TarsGame.TGameData = function() {
    this.tRespOneData = new TarsGame.TData();
    this.tNotifyData = new TarsGame.TData();
    this.vecRespAllData = new TarsStream.List(TarsGame.TData);
    this._classname = "TarsGame.TGameData";
};
TarsGame.TGameData._classname = "TarsGame.TGameData";

TarsGame.TGameData._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TGameData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TGameData._readFrom = function (is) {
    var tmp = new TarsGame.TGameData();
    tmp.tRespOneData = is.readStruct(0, false, TarsGame.TData);
    tmp.tNotifyData = is.readStruct(1, false, TarsGame.TData);
    tmp.vecRespAllData = is.readList(2, false, TarsStream.List(TarsGame.TData));
    return tmp;
};
TarsGame.TGameData.prototype._writeTo = function (os) {
    os.writeStruct(0, this.tRespOneData);
    os.writeStruct(1, this.tNotifyData);
    os.writeList(2, this.vecRespAllData);
};
TarsGame.TGameData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TGameData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TGameData.prototype.toObject = function() { 
    var tmp = {};

    tmp.tRespOneData = this.tRespOneData.toObject();
    tmp.tNotifyData = this.tNotifyData.toObject();
    tmp.vecRespAllData = this.vecRespAllData.toObject();
    
    return tmp;
}
TarsGame.TGameData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("tRespOneData") || (this.tRespOneData.readFromObject(json.tRespOneData));
    !json.hasOwnProperty("tNotifyData") || (this.tNotifyData.readFromObject(json.tNotifyData));
    !json.hasOwnProperty("vecRespAllData") || (this.vecRespAllData.readFromObject(json.vecRespAllData));
}
TarsGame.TGameData.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TGameData.new = function () {
    return new TarsGame.TGameData();
}
TarsGame.TGameData.create = function (is) {
    return TarsGame.TGameData._readFrom(is);
}

TarsGame.TRespMessage = function() {
    this.nTimeout = 0;
    this.eMsgType = TarsGame.EGameMsgType.E_NOTIFY_DATA;
    this.tGameData = new TarsGame.TGameData();
    this._classname = "TarsGame.TRespMessage";
};
TarsGame.TRespMessage._classname = "TarsGame.TRespMessage";

TarsGame.TRespMessage._write = function (os, tag, value) { os.writeStruct(tag, value); }
TarsGame.TRespMessage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TarsGame.TRespMessage._readFrom = function (is) {
    var tmp = new TarsGame.TRespMessage();
    tmp.nTimeout = is.readInt16(0, true, 0);
    tmp.eMsgType = is.readInt32(1, true, TarsGame.EGameMsgType.E_NOTIFY_DATA);
    tmp.tGameData = is.readStruct(2, true, TarsGame.TGameData);
    return tmp;
};
TarsGame.TRespMessage.prototype._writeTo = function (os) {
    os.writeInt16(0, this.nTimeout);
    os.writeInt32(1, this.eMsgType);
    os.writeStruct(2, this.tGameData);
};
TarsGame.TRespMessage.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TarsGame.TRespMessage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TarsGame.TRespMessage.prototype.toObject = function() { 
    var tmp = {};

    tmp.nTimeout = this.nTimeout;
    tmp.eMsgType = this.eMsgType;
    tmp.tGameData = this.tGameData.toObject();
    
    return tmp;
}
TarsGame.TRespMessage.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("nTimeout") || (this.nTimeout = json.nTimeout);
    !json.hasOwnProperty("eMsgType") || (this.eMsgType = json.eMsgType);
    !json.hasOwnProperty("tGameData") || (this.tGameData.readFromObject(json.tGameData));
}
TarsGame.TRespMessage.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TarsGame.TRespMessage.new = function () {
    return new TarsGame.TRespMessage();
}
TarsGame.TRespMessage.create = function (is) {
    return TarsGame.TRespMessage._readFrom(is);
}

TarsGame.IGameMessageImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
}

TarsGame.IGameMessageImp.prototype.initialize = function () { 
    //TODO:
}

TarsGame.IGameMessageImp.prototype.onDispatch = function (current, FuncName, BinBuffer) { 
    switch (FuncName) {
        case 'tars_ping': {
                current.sendResponse = function (_ret) {
                        if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX){
                                var tup = new TarsStream.UniAttribute();
                                tup.tupVersion = current.getRequestVersion();
                                tup.writeInt32("", _ret);
                                current.doResponse(tup.encode());
                        }else{
                                var os = new TarsStream.TarsOutputStream();
                                os.writeInt32(0, _ret);
                                current.doResponse(os.getBinBuffer());
                        }
                }
                        current.sendResponse(0);
                return TarsError.SUCCESS;
        }
        case 'doRoomMessage' : {
            if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                var tup = new TarsStream.UniAttribute();
                tup.tupVersion = current.getRequestVersion();
                tup.decode(BinBuffer);
                var tReqMessage = tup.readStruct("tReqMessage", TarsGame.TReqMessage);
                var tRespMessage = tup.readStruct("tRespMessage", TarsGame.TRespMessage, new TarsGame.TRespMessage());
            } else {
                var is = new TarsStream.TarsInputStream(BinBuffer);
                var tReqMessage = is.readStruct(1, true, TarsGame.TReqMessage);
                var tRespMessage = is.readStruct(2, false, TarsGame.TRespMessage);
            }
            current.sendResponse = function (_ret, tRespMessage) {
                if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                    var tup = new TarsStream.UniAttribute();
                    tup.tupVersion = current.getRequestVersion();
                    tup.writeInt16("", _ret);
                    tup.writeStruct("tRespMessage", tRespMessage);

                    current.doResponse(tup.encode());
                } else {
                    var os = new TarsStream.TarsOutputStream();
                    os.writeInt16(0, _ret);
                    os.writeStruct(2, tRespMessage);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.doRoomMessage(current, tReqMessage, tRespMessage);

            return TarsError.SUCCESS;
        }
        case 'doClientMessage' : {
            if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                var tup = new TarsStream.UniAttribute();
                tup.tupVersion = current.getRequestVersion();
                tup.decode(BinBuffer);
                var tReqMessage = tup.readStruct("tReqMessage", TarsGame.TReqMessage);
                var tRespMessage = tup.readStruct("tRespMessage", TarsGame.TRespMessage, new TarsGame.TRespMessage());
            } else {
                var is = new TarsStream.TarsInputStream(BinBuffer);
                var tReqMessage = is.readStruct(1, true, TarsGame.TReqMessage);
                var tRespMessage = is.readStruct(2, false, TarsGame.TRespMessage);
            }
            current.sendResponse = function (_ret, tRespMessage) {
                if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                    var tup = new TarsStream.UniAttribute();
                    tup.tupVersion = current.getRequestVersion();
                    tup.writeInt16("", _ret);
                    tup.writeStruct("tRespMessage", tRespMessage);

                    current.doResponse(tup.encode());
                } else {
                    var os = new TarsStream.TarsOutputStream();
                    os.writeInt16(0, _ret);
                    os.writeStruct(2, tRespMessage);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.doClientMessage(current, tReqMessage, tRespMessage);

            return TarsError.SUCCESS;
        }
    }
    return TarsError.SERVER.FUNC_NOT_FOUND;
}

TarsGame.IGameMessageImp.prototype.doRoomMessage = function (current, tReqMessage, tRespMessage) {
    //TODO:
    assert.fail('doRoomMessage function not implemented');
}

TarsGame.IGameMessageImp.prototype.doClientMessage = function (current, tReqMessage, tRespMessage) {
    //TODO:
    assert.fail('doClientMessage function not implemented');
}





